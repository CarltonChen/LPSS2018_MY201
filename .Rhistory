listEx[[2]] + c(1, 2, 4)
names(listEx) = c("String", "Vector", "DataFrame")
df = as.data.frame(listEx[["DataFrame"]])
fix(df)
plot(cylinders, mpg)
plot(
Auto$cylinders,
Auto$mpg,
type = "p",
pch = "x",
col = "blue",
xlab = "cylinders",
ylab = "mpg"
)
attach(Auto)
plot(cylinders, mpg)
plot(
cylinders,
mpg,
col = "red",
varwidth = T,
xlab = "cylinders",
ylab = "mpg"
)
pairs(Auto)
pairs(~ mpg + displacement + horsepower + weight + acceleration, Auto)
cylinders = as.factor(cylinders)
boxplot(acceleration, cylinders)
boxplot(mpg, xlab = "MPG", ylab = "Value")
hist(mpg, col = 2, breaks = seq(from = 5, to = 50, by = 5))
pairs(Auto)
pairs(
formula = ~ mpg + displacement + horsepower + weight + acceleration,
data = Auto
)
qqnorm(mpg, ylab = "mpg Quantiles")
qqline(mpg, col = 2, lwd = 2)
par(mfrow = c(1, 2))
x = seq(from = -2, to = 2, length = 50)
y = seq(from = -1, to = 1, length = 50)
z = outer(x ^ 2, y ^ 3)
contour(x, y, z)
persp(x, y, z, theta = -50, phi = 20)
x = seq(-5, 10, by = 1.5)
y = rep("NA", times = length(x))
for (i in 1:length(x))
{
if (x[i] >= 0)
y[i] = "non-negative"
else
y[i] = "negative"
}
x = seq(-5, 10, by = 1.5)
y = ifelse(x > 0, "non-negative", "negative")
x = 1
while (x < 6) {
print(x)
x = x + 1
}
fn = function(arg1) {
if (arg1 <= 0) {
100
}
else{
2 + fn(arg1 - 1)
}
}
m = fn(-5)
m
binomplot = function(size,
prob = 0.5,
colour = 3,
outputvals = FALSE)
{
x = 0:size
y = dbinom(x, size, prob)
plot(x, y, type = "h", col = colour)
if (outputvals)
y
}
binomplot(50)
pbinom(q = 60, size = 85, prob = 0.6)
pnorm(
q = 15,
mean = 12,
sd = 3,
lower.tail = FALSE
) # 1 - pnorm(q = 15, mean = 12, sd = 3)
pbinom(q = 59, size = 85, prob = 0.6) * pnorm(
q = 15,
mean = 12,
sd = 3,
lower.tail = FALSE
)
x = seq(from = -3, to = 3, length = 200)
plot(x, dnorm(x), type = "l")
lines(x, dt(x, df = 16), col = 2)
lines(x, dt(x, df = 8), col = 3)
lines(x, dt(x, df = 4), col = 4)
x <- seq(0, 10, length = 200)
plot(x, dgamma(x, shape = 1, scale = 1), type = "l")
lines(x, dgamma(x, shape = 1, scale = 2), col = 2)
lines(x, dgamma(x, shape = 1, scale = 4), col = 3)
plot(x, dgamma(x, shape = 2, scale = 1), type = "l")
lines(x, dgamma(x, shape = 2, scale = 2), col = 2)
lines(x, dgamma(x, shape = 2, scale = 4), col = 3)
hist(Auto$mpg,
breaks = seq(0, 60, length = 20),
probability = TRUE)
lines(x, dnorm(x, mean = mean(Auto$mpg), sd = sd(Auto$mpg)), col = 2)
poissamp = rpois(n = 400, lambda = 2)
hist(poissamp, breaks = 0:10, probability = TRUE)
normsamp = rnorm(n = 250, mean = 10, sd = 5)
hist(normsamp,
breaks = seq(-10, 30, length = 15),
probability = TRUE)
x = seq(-10, 30, length = 200)
lines(x, dnorm(x, mean = 10, sd = 5), col = 2)
set.seed(1)
rnorm(5)
set.seed(1)
rnorm(5)
nvec = 1:6
sample(nvec)
sample(nvec, size = 3)
sample(nvec, replace = TRUE)
sample(nvec, size = 10, replace = TRUE)
poisSampMean = function(n, lambda, r) {
simvals = rpois(n * r, lambda)
simvals = matrix(simvals, n, r)
colMeans(simvals)
}
set.seed(1)
poisSampMean(10, 3, 6)
histNorm = function(data, nbins = 21) {
hist(
data,
breaks = seq(min(data), max(data), length = nbins),
probability = TRUE,
col = 5
)
x = seq(min(data), max(data), length = 200)
lines(x, dnorm(x, mean = mean(data), sd = sd(data)), col = 2)
}
histNorm(poisSampMean(8, 1, 1000))
rm(list = ls())
fileName = "Advertising.csv"
defaultDataDir = "dropbox备份\LSE computer & home laptop\PUK-LSE summer School\R Code\Introduction to Statistical Learning\Dataset"
defaultDataDir = "dropbox备份\LSE computer & home laptop\PUK-LSE summer School\R Code\Introduction to Statistical Learning\Dataset"
defaultDataDir = "C:\Users\Cheng\Desktop\PUK-LSE summer School\R Code\Introduction to Statistical Learning\Dataset"
defaultDataDir = "C:/Users/LiCheng/Desktop/PKU - LSE Summer School/R Code/Introduction to Statistical Learning/Dataset"
fileLocation = file.path(defaultDataDir, fileName)
Advertising = read.csv(file = fileLocation, header = TRUE)
defaultDataDir = "/Users/Cheng/Desktop/PUK-LSE summer School/R Code/Introduction to Statistical Learning/Dataset"
fileLocation = file.path(defaultDataDir, fileName)
Advertising = read.csv(file = fileLocation, header = TRUE)
fix(Advertising)
fileName = "Auto.csv"
defaultDataDir = "/Users/chengli/Desktop/PKU - LSE Summer School/R Code/Introduction to Statistical Learning/Dataset"
defaultDataDir = "/Users/cheng/Desktop/PKU - LSE Summer School/R Code/Introduction to Statistical Learning/Dataset"
fileLocation = file.path(defaultDataDir, fileName)
Auto = read.csv(
file = fileLocation,
header = TRUE,
colClasses = c(horsepower = "numeric"),
na.strings = "?"
)
defaultDataDir = "/Users/cheng/Desktop/PKU-LSE Summer School/R Code/Introduction to Statistical Learning/Dataset"
# defaultDataDir = "C:/Users/LiCheng/Desktop/PKU - LSE Summer School/R Code/Introduction to Statistical Learning/Dataset"
fileLocation = file.path(defaultDataDir, fileName)
Auto = read.csv(
file = fileLocation,
header = TRUE,
colClasses = c(horsepower = "numeric"),
na.strings = "?"
)
defaultDataDir = "/Users/Cheng/Desktop/PUK-LSE summer School/R Code/Introduction to Statistical Learning/Dataset"
# defaultDataDir = "C:/Users/LiCheng/Desktop/PKU - LSE Summer School/R Code/Introduction to Statistical Learning/Dataset"
fileLocation = file.path(defaultDataDir, fileName)
Auto = read.csv(
file = fileLocation,
header = TRUE,
colClasses = c(horsepower = "numeric"),
na.strings = "?"
)
Auto = na.omit(Auto)
fix(Auto)
library(ISLR)
install.packages((ISLR))
install.packages(ISLR)
installed.packages(ISLR)
library(ISLR)
install.packages("ISLR")
library(ISLR)
Carseats = Carseats
fix(Carseats)
fileName = "Hitters.csv"
defaultDataDir = "/Users/chengli/Desktop"
defaultDataDir = "/Users/cheng/Desktop"
fileLocation = file.path(defaultDataDir, fileName)
write.csv(x = Hitters,
file = fileLocation,
row.names = T)
library(ISLR)
fix(Default)
library(ISLR)
fix(Caravan)
install.packages("tree")
rm(list = ls())
library(tree)
High = ifelse(Carseats$Sales > 8, "Yes", "No")
Carseats = data.frame(Carseats, High)
treeCarseats = tree(formula = High ~ . - Sales, data = Carseats)
summary(treeCarseats)
plot(treeCarseats)
text(treeCarseats, cex = 0.9, pretty = 0)
treeCarseats
set.seed (2)
train = sample (1:nrow(Carseats), 200)
CarseatsTest = Carseats[-train,]
HighTest = High[-train]
treeCarseats = tree(High ~ . - Sales, Carseats, subset = train)
treePred = predict(treeCarseats, CarseatsTest, type = "class")
table(treePred, HighTest)
set.seed (3)
cvCarseats = cv.tree(treeCarseats, FUN = prune.misclass)
cvCarseats
pruneCarseats = prune.misclass(treeCarseats, best = 9)
plot(pruneCarseats)
text(pruneCarseats, cex = 0.9, pretty = 0)
par(mfrow = c(1, 2))
plot(cvCarseats$size, cvCarseats$dev, type = "b")
plot(cvCarseats$k, cvCarseats$dev, type = "b")
treePred = predict(pruneCarseats, CarseatsTest, type = "class")
table(treePred, HighTest)
# Logistic Regression
attach(Default)
lgDefault = glm(formula = default ~ balance,
data = Default,
family = binomial)
summary (lgDefault)
plot(
Default$balance,
lgDefault$fitted.values,
xlab = "Balance",
ylab = "Probability of Default",
col = 4
)
lgPrediction = predict(lgDefault, data.frame(balance = c(1000)), type = "response")
predict(lgDefault, data.frame(balance = c(1000, 2000)), type = "response")
lgDefault = glm(formula = default ~ student,
data = Default,
family = binomial)
summary (lgDefault)
lgDefault = glm(formula = default ~ .,
data = Default,
family = binomial)
summary (lgDefault)
par(mfrow = c(1, 2))
de1 = Default[Default["student"] == "No", ]
de2 = Default[Default["student"] == "Yes", ]
de1 = de1[sort(de1$balance),]
de2 = de2[sort(de2$balance),]
pre1 = predict(lgDefault, de1, type = "response")
pre2 = predict(lgDefault, de2, type = "response")
plot(de1$balance,
pre1,
col = 4,
ylab = "Default Rate",
xlab = "Credit Card Balance")
par(new = TRUE)
plot(de2$balance,
pre2,
col = 6,
axes = F,
ann = F)
par(new = F)
plot(
Default$student,
Default$balance,
col = c("cyan3", "coral2"),
xlab = "Student Status",
ylab = "Credit Card Balance"
)
predict(lgDefault,
data.frame(
balance = c(1500),
student = c("Yes", "No"),
income = c(40000)
),
type = "response")
#############################################################################
#                                                                           #
#                             Regression                                    #
#                                                                           #
#############################################################################
library(ISLR)
attach(Advertising)
adSLR = lm(formula = Sales ~ TV , data = Advertising)
summary(adSLR)
par(mfrow = c(1, 3))
plot(TV, Sales, col = "red")
library(ISLR)
attach(Advertising)
rm(list = ls())
library(ISLR)
attach(Advertising)
rm(list = ls())
library(tree)
High = ifelse(Carseats$Sales > 8, "Yes", "No")
Carseats = data.frame(Carseats, High)
rm(list = ls())
fileName = "Advertising.csv"
defaultDataDir = "/Users/Cheng/Desktop/PUK-LSE summer School/R Code/Introduction to Statistical Learning/Dataset"
# defaultDataDir = "C:/Users/LiCheng/Desktop/PKU - LSE Summer School/R Code/Introduction to Statistical Learning/Dataset"
fileLocation = file.path(defaultDataDir, fileName)
Advertising = read.csv(file = fileLocation, header = TRUE)
fix(Advertising)
fileName = "Auto.csv"
defaultDataDir = "/Users/Cheng/Desktop/PUK-LSE summer School/R Code/Introduction to Statistical Learning/Dataset"
# defaultDataDir = "C:/Users/LiCheng/Desktop/PKU - LSE Summer School/R Code/Introduction to Statistical Learning/Dataset"
fileLocation = file.path(defaultDataDir, fileName)
Auto = read.csv(
file = fileLocation,
header = TRUE,
colClasses = c(horsepower = "numeric"),
na.strings = "?"
)
Auto = na.omit(Auto)
fix(Auto)
library(ISLR)
Carseats = Carseats
fix(Carseats)
fileName = "Hitters.csv"
defaultDataDir = "/Users/cheng/Desktop"
fileLocation = file.path(defaultDataDir, fileName)
write.csv(x = Hitters,
file = fileLocation,
row.names = T)
library(ISLR)
fix(Default)
library(ISLR)
fix(Caravan)
library(ISLR)
fix(Hitters)
fileName = "spam.dat"
defaultDataDir = "/Users/Cheng/Desktop/PUK-LSE summer School/R Code/Introduction to Statistical Learning/Dataset"
# defaultDataDir = "C:/Users/LiCheng/Desktop/PKU - LSE Summer School/R Code/Introduction to Statistical Learning/Dataset"
fileLocation = file.path(defaultDataDir, fileName)
Spam = read.table(file = fileLocation,
header = TRUE,
na.strings = "?")
Spam = na.omit(Spam)
fix(Spam)
#############################################################################
#                                                                           #
#                             Classification                                #
#                                                                           #
#############################################################################
# Tree
rm(list = ls())
library(tree)
High = ifelse(Carseats$Sales > 8, "Yes", "No")
Carseats = data.frame(Carseats, High)
treeCarseats = tree(formula = High ~ . - Sales, data = Carseats)
summary(treeCarseats)
plot(treeCarseats)
text(treeCarseats, cex = 0.9, pretty = 0)
treeCarseats
set.seed (2)
train = sample (1:nrow(Carseats), 200)
CarseatsTest = Carseats[-train,]
HighTest = High[-train]
treeCarseats = tree(High ~ . - Sales, Carseats, subset = train)
treePred = predict(treeCarseats, CarseatsTest, type = "class")
table(treePred, HighTest)
set.seed (3)
cvCarseats = cv.tree(treeCarseats, FUN = prune.misclass)
cvCarseats
pruneCarseats = prune.misclass(treeCarseats, best = 9)
plot(pruneCarseats)
text(pruneCarseats, cex = 0.9, pretty = 0)
par(mfrow = c(1, 2))
plot(cvCarseats$size, cvCarseats$dev, type = "b")
plot(cvCarseats$k, cvCarseats$dev, type = "b")
treePred = predict(pruneCarseats, CarseatsTest, type = "class")
table(treePred, HighTest)
# Logistic Regression
attach(Default)
lgDefault = glm(formula = default ~ balance,
data = Default,
family = binomial)
summary (lgDefault)
plot(
Default$balance,
lgDefault$fitted.values,
xlab = "Balance",
ylab = "Probability of Default",
col = 4
)
lgPrediction = predict(lgDefault, data.frame(balance = c(1000)), type = "response")
predict(lgDefault, data.frame(balance = c(1000, 2000)), type = "response")
lgDefault = glm(formula = default ~ student,
data = Default,
family = binomial)
summary (lgDefault)
lgDefault = glm(formula = default ~ .,
data = Default,
family = binomial)
summary (lgDefault)
par(mfrow = c(1, 2))
de1 = Default[Default["student"] == "No", ]
de2 = Default[Default["student"] == "Yes", ]
de1 = de1[sort(de1$balance),]
de2 = de2[sort(de2$balance),]
pre1 = predict(lgDefault, de1, type = "response")
pre2 = predict(lgDefault, de2, type = "response")
plot(de1$balance,
pre1,
col = 4,
ylab = "Default Rate",
xlab = "Credit Card Balance")
par(new = TRUE)
plot(de2$balance,
pre2,
col = 6,
axes = F,
ann = F)
par(new = F)
plot(
Default$student,
Default$balance,
col = c("cyan3", "coral2"),
xlab = "Student Status",
ylab = "Credit Card Balance"
)
predict(lgDefault,
data.frame(
balance = c(1500),
student = c("Yes", "No"),
income = c(40000)
),
type = "response")
#############################################################################
#                                                                           #
#                             Regression                                    #
#                                                                           #
#############################################################################
library(ISLR)
attach(Advertising)
setwd("C:\Users\Cheng\Desktop\PUK-LSE summer School\R Code\Introduction to Statistical Learning\Dataset")
setwd("C:/Users/Cheng/Desktop/PUK-LSE summer School/R Code/Introduction to Statistical Learning/Dataset")
attach(Advertising)
adSLR = lm(formula = Sales ~ TV , data = Advertising)
detach(Default)
attach(Advertising)
fileName = "Advertising.csv"
defaultDataDir = "/Users/Cheng/Desktop/PUK-LSE summer School/R Code/Introduction to Statistical Learning/Dataset"
# defaultDataDir = "C:/Users/LiCheng/Desktop/PKU - LSE Summer School/R Code/Introduction to Statistical Learning/Dataset"
fileLocation = file.path(defaultDataDir, fileName)
Advertising = read.csv(file = fileLocation, header = TRUE)
fix(Advertising)
attach(Advertising)
adSLR = lm(formula = Sales ~ TV , data = Advertising)
summary(adSLR)
par(mfrow = c(1, 3))
plot(TV, Sales, col = "red")
abline(lm(formula = Sales ~ TV , data = Advertising),
lwd = 3,
col = "blue")
plot(Radio, Sales, col = "red")
abline(lm(formula = Sales ~ Radio , data = Advertising),
lwd = 3,
col = "blue")
plot(Newspaper, Sales, col = "red")
abline(lm(formula = Sales ~ Newspaper , data = Advertising),
lwd = 3,
col = "blue")
par(mfrow = c(2, 2))
plot(adSLR)
plot(predict(adSLR), residuals(adSLR))
multipleLR = lm(formula = Sales ~ TV + Radio + Newspaper , data = Advertising)
summary(multipleLR)
cor(Advertising[-1])
multipleLR = lm(formula = Sales ~ TV + Radio, data = Advertising)
predict(multipleLR, data.frame(TV = c(100), Radio = c(20)), interval = "confidence")
predict(multipleLR, data.frame(TV = c(100), Radio = c(20)), interval = "predict")
multipleLR = lm(formula = Sales ~ TV * Radio, data = Advertising)
coefficients(summary(multipleLR))
plot(multipleLR$residuals)
abline(0, 0, lty = "dashed")
multipleLR = lm(formula = Auto$mpg ~ Auto$horsepower + I(Auto$horsepower ^
2),
data = Auto)
coefficients(summary(multipleLR))
plot(Auto$horsepower, Auto$mpg, col = "red")
lines(
sort(Auto$horsepower),
fitted(multipleLR)[order(Auto$horsepower)],
col = 'blue',
type = 'l',
lwd = 3
)
multipleLR = lm(formula = Auto$mpg ~ poly(Auto$horsepower, 5),
data = Auto)
lines(
sort(Auto$horsepower),
fitted(multipleLR)[order(Auto$horsepower)],
col = 6,
type = 'l',
lwd = 3
)
